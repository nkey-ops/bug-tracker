package com.bluesky.bugtraker.shared.dto;

import com.bluesky.bugtraker.io.entity.UserEntity;
import com.bluesky.bugtraker.shared.bugstatus.Priority;
import com.bluesky.bugtraker.shared.bugstatus.Severity;
import com.bluesky.bugtraker.shared.bugstatus.Status;
import lombok.Getter;
import lombok.Setter;

import java.io.Serial;
import java.io.Serializable;
import java.time.Instant;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.Set;

@Getter
@Setter
public class BugDto implements Serializable {
    @Serial
    private static final long serialVersionUID = 5211376248151308747L;

    private Long id;
    private String publicId;
    private Status status;
    private Severity severity;
    private Priority priority;
    private Date reportedTime;
    private UserDto reportedBy;
    private ProjectDto project;

    private String shortDescription;
    private String howToReproduce;
    private String erroneousProgramBehaviour;
    private String howToSolve;
    private List<UserDto> bugFixers;

//    TODO check if time generated by the server is the same time locally
    public BugDto() {
        this.reportedTime = Date.from(Instant.now());
    }


//    @Override
//    public boolean equals(Object o) {
//        if (this == o) return true;
//        if (o == null || getClass() != o.getClass()) return false;
//        BugDto bugDto = (BugDto) o;
//        return publicId.equals(bugDto.publicId) && status == bugDto.status && severity == bugDto.severity && priority == bugDto.priority && reportedTime.equals(bugDto.reportedTime) && reportedBy.equals(bugDto.reportedBy) && howToReproduce.equals(bugDto.howToReproduce) && erroneousProgramBehaviour.equals(bugDto.erroneousProgramBehaviour) && bugFixers.equals(bugDto.bugFixers);
//    }

    @Override
    public int hashCode() {
        return Objects.hash(publicId, status, severity, priority, reportedTime, reportedBy, howToReproduce, erroneousProgramBehaviour, bugFixers);
    }


}

